# -*- mode: ruby -*-
# vi: set ft=ruby :

REQUIRED_PLUGINS = %w(vagrant-service-manager)
errors = []

def message(name)
  "#{name} plugin is not installed, run `vagrant plugin install #{name}` to install it."
end
# Validate and collect error message if plugin is not installed
REQUIRED_PLUGINS.each { |plugin| errors << message(plugin) unless Vagrant.has_plugin?(plugin) }
unless errors.empty?
  msg = errors.size > 1 ? "Errors: \n* #{errors.join("\n* ")}" : "Error: #{errors.first}"
  fail Vagrant::Errors::VagrantError.new, msg
end

# Vagrantfile for single node k8s setup
Vagrant.configure(2) do |config|
  config.vm.box = "projectatomic/adb"

  config.vm.provider "libvirt" do |libvirt, override|
    libvirt.driver = "kvm"
    libvirt.memory = 1024
    libvirt.cpus = 2
  end

  config.vm.provider "virtualbox" do |vbox, override|
    vbox.memory = 1024
    vbox.cpus = 2

    # Enable use of more than one virtual CPU in a virtual machine.
    vbox.customize ["modifyvm", :id, "--ioapic", "on"]
  end

  # Setup a DHCP based private network
  config.vm.network "private_network", type: "dhcp"

  # DWM
  config.vm.synced_folder "/guests/sharedfolder", "/sharedfolder", type: "sshfs"

  config.vm.provider "openstack" do |os|
      # Specify OpenStack authentication information
      os.openstack_auth_url = ENV['OS_AUTH_URL']
      os.tenant_name = ENV['OS_TENANT_NAME']
      os.username = ENV['OS_USERNAME']
      os.password = ENV['OS_PASSWORD']

      # Specify instance information
      os.server_name = ENV['OS_INSTANCE']
      os.flavor = ENV['OS_FLAVOR']
      os.image = ENV['OS_IMAGE']
      os.floating_ip_pool = ENV['OS_FLOATING_IP_POOL']

      os.security_groups = ['default', ENV['OS_SECURITY_GROUP']]
      os.keypair_name = ENV['OS_KEYPAIR_NAME']
      config.ssh.private_key_path = ENV['OS_PRIVATE_KEYPATH']
      config.ssh.username = 'vagrant'
    end

  config.vm.provision "shell", inline: <<-SHELL
     sudo mkdir -p /etc/pki/kube-apiserver/
    sudo openssl genrsa -out /etc/pki/kube-apiserver/serviceaccount.key 2048 > /dev/null 2>&1
     sudo sed -i.back '/KUBE_API_ARGS=*/c\KUBE_API_ARGS="--service_account_key_file=/etc/pki/kube-apiserver/serviceaccount.key"' /etc/kubernetes/apiserver
     sudo sed -i.back '/KUBE_CONTROLLER_MANAGER_ARGS=*/c\KUBE_CONTROLLER_MANAGER_ARGS="--service_account_private_key_file=/etc/pki/kube-apiserver/serviceaccount.key"' /etc/kubernetes/controller-manager

     echo "setup master"
     for service in etcd kube-apiserver kube-controller-manager kube-scheduler; do
       echo "  enable $service"
      sudo systemctl enable $service > /dev/null 2>&1

       echo "  start $service"
       sudo systemctl start $service
     done

     echo "setup nodes"
     for service in kube-proxy kubelet; do
       echo "  enable $service"
      sudo systemctl enable $service > /dev/null 2>&1

       echo "  start $service"
       sudo systemctl start $service
     done
     echo "  restart docker"
     sudo systemctl restart docker
  SHELL
end
